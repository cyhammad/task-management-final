import {
  collection,
  collectionGroup,
  doc,
  getDoc,
  getDocs,
  onSnapshot,
  orderBy,
  query,
  where,
} from "firebase/firestore";
import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import Header from "../components/Header";
import SubNavBar from "../components/SubNavBar";
import Task from "../components/Task";
import Column from "../components/Column";
import { useAuth } from "../context/AuthContext";
import { auth, db } from "../firebase";

function QuickTasks() {
  const [tasks, setTasks] = useState([]);

  const [newTasks, setNewTasks] = useState([]);
  const [todoTasks, setTodoTasks] = useState([]);
  const [inProgressTasks, setInProgressTasks] = useState([]);
  const [completedTasks, setCompletedTasks] = useState([]);
  const [readyForReviewTasks, setReadyForReviewTasks] = useState([]);
  const [revisionTasks, setRevisionTasks] = useState([]);
  const [pendingClientReviewTasks, setPendingClientReviewTasks] = useState([]);
  const [pending3rdPartyTasks, setPending3rdPartyTasks] = useState([]);

  const [newTaskCount, setNewTaskCount] = useState(3);
  const [todoTaskCount, setTodoTaskCount] = useState(3);
  const [inProgressTaskCount, setInProgressTaskCount] = useState(3);
  const [completedTaskCount, setCompletedTaskCount] = useState(3);
  const [readyForReviewTaskCount, setReadyForReviewTaskCount] = useState(3);
  const [revisionTaskCount, setRevisionTaskCount] = useState(3);
  const [pendingClientReviewTaskCount, setPendingClientReviewTaskCount] =
    useState(3);
  const [pending3rdPartyTaskCount, setPending3rdPartyTaskCount] = useState(3);

  useEffect(
    () =>
      onSnapshot(query(collectionGroup(db, "tasks")), (snapshot) => {
        setTasks(snapshot.docs);
      }),
    [db]
  );
  useEffect(() => {
    var a = tasks.filter(
      (item) => item.data().status == "new" || !item.data().status
    );
    setNewTasks(a);
  }, [tasks]);
  useEffect(() => {
    var a = tasks.filter((item) => item.data().status == "todo");
    setTodoTasks(a);
  }, [tasks]);
  useEffect(() => {
    var a = tasks.filter((item) => item.data().status == "inprogress");
    setInProgressTasks(a);
  }, [tasks]);
  useEffect(() => {
    var a = tasks.filter((item) => item.data().status == "completed");
    setCompletedTasks(a);
  }, [tasks]);
  useEffect(() => {
    var a = tasks.filter((item) => item.data().status == "readyForReview");
    setReadyForReviewTasks(a);
  }, [tasks]);
  useEffect(() => {
    var a = tasks.filter((item) => item.data().status == "revision");
    setRevisionTasks(a);
  }, [tasks]);
  useEffect(() => {
    var a = tasks.filter(
      (item) => item.data().status == "pendingClientReview"
    );
    setPendingClientReviewTasks(a);
  }, [tasks]);
  useEffect(() => {
    var a = tasks.filter((item) => item.data().status == "pending3rdParty");
    setPending3rdPartyTasks(a);
  }, [tasks]);
  const viewMore = (task) => {
    if (task == "new") {
      setNewTaskCount(newTasks.length);
    }
    if (task == "todo") {
      setTodoTaskCount(todoTasks.length);
    }
    if (task == "inProgress") {
      setInProgressTaskCount(inProgressTasks.length);
    }
    if (task == "completed") {
      setCompletedTaskCount(completedTasks.length);
    }
    if (task == "pendingClientReview") {
      setPendingClientReviewTaskCount(pendingClientReviewTasks.length);
    }
    if (task == "pending3rdParty") {
      setPending3rdPartyTaskCount(pending3rdPartyTasks.length);
    }
    if (task == "revision") {
      setRevisionTaskCount(revisionTasks.length);
    }
    if (task == "readyForReview") {
      setReadyForReviewTaskCount(readyForReviewTasks.length);
    }
  };
  const viewLess = (task) => {
    if (task == "new") {
      setNewTaskCount(3);
    }
    if (task == "todo") {
      setTodoTaskCount(3);
    }
    if (task == "inProgress") {
      setInProgressTaskCount(3);
    }
    if (task == "completed") {
      setCompletedTaskCount(3);
    }
    if (task == "pendingClientReview") {
      setPendingClientReviewTaskCount(3);
    }
    if (task == "pending3rdParty") {
      setPending3rdPartyTaskCount(3);
    }
    if (task == "revision") {
      setRevisionTaskCount(3);
    }
    if (task == "readyForReview") {
      setReadyForReviewTaskCount(3);
    }
  };
  console.log("Tasks", tasks)
  return (
    <div className="bg-default">
      <Head>
        <title>Task Management | Admin</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* Header */}
      <Header selectedTab="work" />

      {/* Tasks */}
      <div className="px-4 sm:px-6 md:px-8 lg:px-10 lg:min-h-screen lg:pb-10">
        <h1 className="text-3xl font-semibold mt-11">Quick Tasks</h1>
        <SubNavBar selectedTab="quicktasks" />
        <div className="flex space-x-5 w-full overflow-x-auto scroll-smooth scrollbar pb-60">
          <Column
            name="New Projects"
            taskCount={newTasks.length}
            viewMore={() => viewMore("new")}
            viewLess={() => viewLess("new")}
          >
            {newTasks.slice(0, newTaskCount).map((task) => (
              <>
                <Task task={task} />
              </>
            ))}
          </Column>
          <Column
            name="Todo"
            taskCount={todoTasks.length}
            viewMore={() => viewMore("todo")}
            viewLess={() => viewLess("todo")}
          >
            {todoTasks.slice(0, todoTaskCount).map((task) => (
              <>
                <Task task={task} />
              </>
            ))}
          </Column>
          <Column
            name="In Progress"
            taskCount={inProgressTasks.length}
            viewMore={() => viewMore("inProgress")}
            viewLess={() => viewLess("inProgress")}
          >
            {inProgressTasks.slice(0, inProgressTaskCount).map((task) => (
              <>
                <Task task={task} />
              </>
            ))}
          </Column>
          <Column
            name="Completed"
            taskCount={completedTasks.length}
            viewMore={() => viewMore("completed")}
            viewLess={() => viewLess("completed")}
          >
            {completedTasks.slice(0, completedTaskCount).map((task) => (
              <>
                <Task task={task} />
              </>
            ))}
          </Column>
          <Column
            name="Ready For Review"
            taskCount={readyForReviewTasks.length}
            viewMore={() => viewMore("readyForReview")}
            viewLess={() => viewLess("readyForReview")}
          >
            {readyForReviewTasks
              .slice(0, readyForReviewTaskCount)
              .map((task) => (
                <>
                  <Task task={task} />
                </>
              ))}
          </Column>
          <Column
            name="Pending Client Review"
            taskCount={pendingClientReviewTasks.length}
            viewMore={() => viewMore("pendingClientReview")}
            viewLess={() => viewLess("pendingClientReview")}
          >
            {pendingClientReviewTasks
              .slice(0, pendingClientReviewTaskCount)
              .map((task) => (
                <>
                  <Task task={task} />
                </>
              ))}
          </Column>
          <Column
            name="Revision"
            taskCount={revisionTasks.length}
            viewMore={() => viewMore("revision")}
            viewLess={() => viewLess("revision")}
          >
            {revisionTasks.slice(0, revisionTaskCount).map((task) => (
              <>
                <Task task={task} />
              </>
            ))}
          </Column>
          <Column
            name="Pending 3rd Party"
            taskCount={pending3rdPartyTasks.length}
            viewMore={() => viewMore("pending3rdParty")}
            viewLess={() => viewLess("pending3rdParty")}
          >
            {pending3rdPartyTasks
              .slice(0, pending3rdPartyTaskCount)
              .map((task) => (
                <>
                  <Task task={task} />
                </>
              ))}
          </Column>
        </div>
      </div>
      {/* Modal */}
    </div>
  );
}

export default QuickTasks;
