import Head from "next/head";
import Image from "next/image";
import { useAuth } from "../context/AuthContext";
import SubNavBar from "../components/SubNavBar";
import Header from "../components/Header";
import TaskColumn from "../components/TaskColumn";
import Project from "../components/Project";
import { faker } from "@faker-js/faker";
import { useEffect, useState } from "react";
import { db } from "../firebase";
import {
  collection,
  collectionGroup,
  onSnapshot,
  orderBy,
  query,
} from "firebase/firestore";

export default function Home() {
  const { user, logout } = useAuth();
  const [taskList, setTaskList] = useState([]);
  const [newTasks, setNewTasks] = useState([]);
  const [todoTasks, setTodoTasks] = useState([]);
  const [inProgressTasks, setInProgressTasks] = useState([]);
  const [completedTasks, setCompletedTasks] = useState([]);
  useEffect(
    () =>
      onSnapshot(query(collectionGroup(db, "projects")), (snapshot) => {
        setTaskList(snapshot.docs);
      }),
    [db]
  );
  useEffect(
    ()=>{
      var a = taskList.filter(item =>item.data().status == "new")
      setNewTasks(a);
    },[taskList]
  );
  useEffect(
    ()=>{
      var a = taskList.filter(item =>item.data().status == "todo")
      setTodoTasks(a);
    },[taskList]
  );
  useEffect(
    ()=>{
      var a = taskList.filter(item =>item.data().status == "inprogress")
      setInProgressTasks(a);
    },[taskList]
  );
  useEffect(
    ()=>{
      var a = taskList.filter(item =>item.data().status == "completed")
      setCompletedTasks(a);
    },[taskList]
  );
  return (
    <div className="bg-default">
      <Head>
        <title>Task Management | Admin</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* Header */}
      <Header selectedTab="work" />

      {/* Tasks */}
      <div className="px-4 sm:px-6 md:px-8 lg:px-10 lg:min-h-screen">
        <h1 className="text-3xl font-semibold mt-11">Projects</h1>
        <SubNavBar selectedTab="projects" />
        <div className="flex space-x-5 w-full overflow-x-auto scroll-smooth scrollbar">
          <TaskColumn name="New Projects" taskCount={newTasks.length} >
            {newTasks.map((task) => (
              <>
                <Project
                    name={task.data().title}
                    priority={task.data().priorityValue}
                    taskNumber={task.data().tasks.length}
                    userId={task.data().userId}
                    desc={task.data().description}
                    projectId={task.data().projectId}
                    key={task.data().id}
                    comments={task.data().comments}
                  />
              </>
            ))}
          </TaskColumn>
          <TaskColumn name="Todo" taskCount={todoTasks.length}>
            {todoTasks.map((task) => (
                <>
                  <Project
                      name={task.data().title}
                      priority={task.data().priorityValue}
                      taskNumber={task.data().tasks.length}
                      userId={task.data().userId}
                      desc={task.data().description}
                      projectId={task.data().projectId}
                      key={task.data().id}
                    />
                </>
              ))}
          </TaskColumn>
          <TaskColumn name="In Progress" taskCount={inProgressTasks.length}>
            {inProgressTasks.map((task) => (
                <>
                  <Project
                      name={task.data().title}
                      priority={task.data().priorityValue}
                      taskNumber={task.data().tasks.length}
                      userId={task.data().userId}
                      desc={task.data().description}
                      projectId={task.data().projectId}
                      key={task.data().id}
                    />
                </>
              ))}
          </TaskColumn>
          <TaskColumn name="Completed" taskCount={completedTasks.length}>
            {completedTasks.map((task) => (
                <>
                  <Project
                      name={task.data().title}
                      priority={task.data().priorityValue}
                      taskNumber={task.data().tasks.length}
                      userId={task.data().userId}
                      desc={task.data().description}
                      projectId={task.data().projectId}
                      key={task.data().id}
                    />
                </>
              ))} 
          </TaskColumn>
        </div>
      </div>
      {/* Modal */}
    </div>
  );
}
